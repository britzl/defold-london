exercise 1.1)

What is the value of this expression ?
type(nil) == nil


exercise 1.2)

Why does the following code give an error message rather than printing "Shiny!" ?
$ Print("Shiny!")
stdin:1: attempt to call global 'Print' (a nil value)
stack traceback:
	stdin:1: in main chunk
	[C]: ?


exercise 1.3)

Consider the following if statement:

if n < 10 then
    print("x")
elseif n > 0 then
    print("x")
end

If n is 5, how many x's will be printed ?


exercise 1.4)

Write a for loop that prints out the even numbers between 2 and 10, inclusive, in reverse order.


exercise 1.5)

Write a function called typed_to_string that converts a value to a string and prefixes that string with the value's type.

print(typed_to_string("abc"))		--> string: abc
print(typed_to_string(42))			--> number: 42
print(typed_to_string(true))		--> boolean: true
print(typed_to_string(function() end))--> function: function: 0x485a10


exercise 1.6)

How many times does this loop ?
for i = -10, 10 do
    print(i)
end


exercise 1.7)

What is the result of the expressions ? (run them in Lua and see the output format)
2^3
2^3^4
2^-3^4


exercise 1.8)

What will the following script print? Explain.

sunday = "Monday"
monday = "Sunday"
t = {sunday = "Monday", [sunday] = monday }
print(t.sunday, t[sunday], t[t.sunday])


exercise 1.9)

Create a table with \\, \t, \n as keys and
and "backslash", "tab", "newline" as values.
Do two different write styles,
one where the table is created in one assignment.


exercise 1.10)

Most languages with a C-like syntax do not offer an
elseif construct. Why does Lua need this construct
more than those languages ?


exercise 1.11)

what happens when this is run? (Hint, you might want to run the code in your mind first)

local i = 5
while i do
    print(i)
    i = i - 1
end


exercise 1.12)    OPTIONAL

local a = {}
a.a = a

what would be the value of a.a.a.a ?
Is any "a" in that sequence somehow different from the others ?
After adding the line:
a.a.a.a = 2
What would be the value of a.a.a.a now ?


exercise 1.13)    OPTIONAL

Create a maze game in maze.lua and run it via the terminal.
There are four rooms: 
    1 2
    3 4
You start in room 1,
the game waits for user input (use io.read() from io library).
if input is "south" you move to room 3,
if input is "east" you move to room 2,
if input would go out of the map to "north" or "west",
or other input, you print out invalid move.
The game waits again for input
until you have moved to room 4, then the game ends.



LINK TO SOLUTIONS:
https://docs.google.com/document/d/1k1CYy8BbUXOGDABMcxxRuh13Vkl2Ar31AATM1hNR01U
